<<<<<<< Updated upstream
{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-reorder_2-md.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6H;AAC/F;AACyF;;AAEvH;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,QAAQ,2DAAU,QAAQ,EAAE,2DAAC,eAAe,2DAAC,cAAc,sDAAsD;AAC1I;AACA,wBAAwB,uBAAuB,aAAa,cAAc,YAAY,cAAc,cAAc,eAAe,eAAe,WAAW,EAAE;AAC7J;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yJAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6DAAsB;AAClC;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ,6DAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,sCAAsC,YAAY;AAClD;AACA;AACA,sCAAsC,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2DAAU;AAC/B,gBAAgB,2DAAC,CAAC,mDAAI,GAAG;AACzB;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA,MAAM;AACN,wBAAwB,gCAAgC,yCAAyC,iCAAiC,yBAAyB,+CAA+C,sBAAsB,iBAAiB,yBAAyB,sBAAsB,qBAAqB,iBAAiB,6BAA6B,cAAc,oBAAoB,YAAY,mBAAmB,sBAAsB,kBAAkB,gDAAgD,wBAAwB,gBAAgB,kBAAkB,kBAAkB,kCAAkC,0BAA0B,2CAA2C,mCAAmC,WAAW,YAAY,2CAA2C,gCAAgC,wBAAwB,EAAE;AAC90B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqE","file":"53-es2015.js","sourcesContent":["import { r as registerInstance, h, c as getIonMode, H as Host, d as createEvent, e as getElement } from './core-feeeff0d.js';\r\nimport './config-3c7f3790.js';\r\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, c as hapticSelectionEnd } from './haptic-c8f1473e.js';\r\n\r\nconst Reorder = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    onClick(ev) {\r\n        ev.preventDefault();\r\n        ev.stopImmediatePropagation();\r\n    }\r\n    render() {\r\n        return (h(Host, { class: getIonMode(this) }, h(\"slot\", null, h(\"ion-icon\", { name: \"reorder\", lazy: false, class: \"reorder-icon\" }))));\r\n    }\r\n    static get style() { return \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px;font-size:31px;opacity:.3}\"; }\r\n};\r\n\r\nconst ReorderGroup = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.lastToIndex = -1;\r\n        this.cachedHeights = [];\r\n        this.scrollElTop = 0;\r\n        this.scrollElBottom = 0;\r\n        this.scrollElInitial = 0;\r\n        this.containerTop = 0;\r\n        this.containerBottom = 0;\r\n        this.state = 0 /* Idle */;\r\n        /**\r\n         * If `true`, the reorder will be hidden.\r\n         */\r\n        this.disabled = true;\r\n        this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\r\n    }\r\n    disabledChanged() {\r\n        if (this.gesture) {\r\n            this.gesture.setDisabled(this.disabled);\r\n        }\r\n    }\r\n    async connectedCallback() {\r\n        const contentEl = this.el.closest('ion-content');\r\n        if (contentEl) {\r\n            this.scrollEl = await contentEl.getScrollElement();\r\n        }\r\n        this.gesture = (await import('./index-624eea58.js')).createGesture({\r\n            el: this.el,\r\n            gestureName: 'reorder',\r\n            gesturePriority: 110,\r\n            threshold: 0,\r\n            direction: 'y',\r\n            passive: false,\r\n            canStart: detail => this.canStart(detail),\r\n            onStart: ev => this.onStart(ev),\r\n            onMove: ev => this.onMove(ev),\r\n            onEnd: () => this.onEnd(),\r\n        });\r\n        this.disabledChanged();\r\n    }\r\n    disconnectedCallback() {\r\n        this.onEnd();\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Completes the reorder operation. Must be called by the `ionItemReorder` event.\r\n     *\r\n     * If a list of items is passed, the list will be reordered and returned in the\r\n     * proper order.\r\n     *\r\n     * If no parameters are passed or if `true` is passed in, the reorder will complete\r\n     * and the item will remain in the position it was dragged to. If `false` is passed,\r\n     * the reorder will complete and the item will bounce back to its original position.\r\n     *\r\n     * @param listOrReorder A list of items to be sorted and returned in the new order or a\r\n     * boolean of whether or not the reorder should reposition the item.\r\n     */\r\n    complete(listOrReorder) {\r\n        return Promise.resolve(this.completeSync(listOrReorder));\r\n    }\r\n    canStart(ev) {\r\n        if (this.selectedItemEl || this.state !== 0 /* Idle */) {\r\n            return false;\r\n        }\r\n        const target = ev.event.target;\r\n        const reorderEl = target.closest('ion-reorder');\r\n        if (!reorderEl) {\r\n            return false;\r\n        }\r\n        const item = findReorderItem(reorderEl, this.el);\r\n        if (!item) {\r\n            return false;\r\n        }\r\n        ev.data = item;\r\n        return true;\r\n    }\r\n    onStart(ev) {\r\n        ev.event.preventDefault();\r\n        const item = this.selectedItemEl = ev.data;\r\n        const heights = this.cachedHeights;\r\n        heights.length = 0;\r\n        const el = this.el;\r\n        const children = el.children;\r\n        if (!children || children.length === 0) {\r\n            return;\r\n        }\r\n        let sum = 0;\r\n        for (let i = 0; i < children.length; i++) {\r\n            const child = children[i];\r\n            sum += child.offsetHeight;\r\n            heights.push(sum);\r\n            child.$ionIndex = i;\r\n        }\r\n        const box = el.getBoundingClientRect();\r\n        this.containerTop = box.top;\r\n        this.containerBottom = box.bottom;\r\n        if (this.scrollEl) {\r\n            const scrollBox = this.scrollEl.getBoundingClientRect();\r\n            this.scrollElInitial = this.scrollEl.scrollTop;\r\n            this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\r\n            this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\r\n        }\r\n        else {\r\n            this.scrollElInitial = 0;\r\n            this.scrollElTop = 0;\r\n            this.scrollElBottom = 0;\r\n        }\r\n        this.lastToIndex = indexForItem(item);\r\n        this.selectedItemHeight = item.offsetHeight;\r\n        this.state = 1 /* Active */;\r\n        item.classList.add(ITEM_REORDER_SELECTED);\r\n        hapticSelectionStart();\r\n    }\r\n    onMove(ev) {\r\n        const selectedItem = this.selectedItemEl;\r\n        if (!selectedItem) {\r\n            return;\r\n        }\r\n        // Scroll if we reach the scroll margins\r\n        const scroll = this.autoscroll(ev.currentY);\r\n        // // Get coordinate\r\n        const top = this.containerTop - scroll;\r\n        const bottom = this.containerBottom - scroll;\r\n        const currentY = Math.max(top, Math.min(ev.currentY, bottom));\r\n        const deltaY = scroll + currentY - ev.startY;\r\n        const normalizedY = currentY - top;\r\n        const toIndex = this.itemIndexForTop(normalizedY);\r\n        if (toIndex !== this.lastToIndex) {\r\n            const fromIndex = indexForItem(selectedItem);\r\n            this.lastToIndex = toIndex;\r\n            hapticSelectionChanged();\r\n            this.reorderMove(fromIndex, toIndex);\r\n        }\r\n        // Update selected item position\r\n        selectedItem.style.transform = `translateY(${deltaY}px)`;\r\n    }\r\n    onEnd() {\r\n        const selectedItemEl = this.selectedItemEl;\r\n        this.state = 2 /* Complete */;\r\n        if (!selectedItemEl) {\r\n            this.state = 0 /* Idle */;\r\n            return;\r\n        }\r\n        const toIndex = this.lastToIndex;\r\n        const fromIndex = indexForItem(selectedItemEl);\r\n        if (toIndex === fromIndex) {\r\n            this.completeSync();\r\n        }\r\n        else {\r\n            this.ionItemReorder.emit({\r\n                from: fromIndex,\r\n                to: toIndex,\r\n                complete: this.completeSync.bind(this)\r\n            });\r\n        }\r\n        hapticSelectionEnd();\r\n    }\r\n    completeSync(listOrReorder) {\r\n        const selectedItemEl = this.selectedItemEl;\r\n        if (selectedItemEl && this.state === 2 /* Complete */) {\r\n            const children = this.el.children;\r\n            const len = children.length;\r\n            const toIndex = this.lastToIndex;\r\n            const fromIndex = indexForItem(selectedItemEl);\r\n            if (toIndex !== fromIndex && (!listOrReorder || listOrReorder === true)) {\r\n                const ref = (fromIndex < toIndex)\r\n                    ? children[toIndex + 1]\r\n                    : children[toIndex];\r\n                this.el.insertBefore(selectedItemEl, ref);\r\n            }\r\n            if (Array.isArray(listOrReorder)) {\r\n                listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\r\n            }\r\n            for (let i = 0; i < len; i++) {\r\n                children[i].style['transform'] = '';\r\n            }\r\n            selectedItemEl.style.transition = '';\r\n            selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\r\n            this.selectedItemEl = undefined;\r\n            this.state = 0 /* Idle */;\r\n        }\r\n        return listOrReorder;\r\n    }\r\n    itemIndexForTop(deltaY) {\r\n        const heights = this.cachedHeights;\r\n        let i = 0;\r\n        // TODO: since heights is a sorted array of integers, we can do\r\n        // speed up the search using binary search. Remember that linear-search is still\r\n        // faster than binary-search for small arrays (<64) due CPU branch misprediction.\r\n        for (i = 0; i < heights.length; i++) {\r\n            if (heights[i] > deltaY) {\r\n                break;\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n    /********* DOM WRITE ********* */\r\n    reorderMove(fromIndex, toIndex) {\r\n        const itemHeight = this.selectedItemHeight;\r\n        const children = this.el.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            const style = children[i].style;\r\n            let value = '';\r\n            if (i > fromIndex && i <= toIndex) {\r\n                value = `translateY(${-itemHeight}px)`;\r\n            }\r\n            else if (i < fromIndex && i >= toIndex) {\r\n                value = `translateY(${itemHeight}px)`;\r\n            }\r\n            style['transform'] = value;\r\n        }\r\n    }\r\n    autoscroll(posY) {\r\n        if (!this.scrollEl) {\r\n            return 0;\r\n        }\r\n        let amount = 0;\r\n        if (posY < this.scrollElTop) {\r\n            amount = -SCROLL_JUMP;\r\n        }\r\n        else if (posY > this.scrollElBottom) {\r\n            amount = SCROLL_JUMP;\r\n        }\r\n        if (amount !== 0) {\r\n            this.scrollEl.scrollBy(0, amount);\r\n        }\r\n        return this.scrollEl.scrollTop - this.scrollElInitial;\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { class: {\r\n                [mode]: true,\r\n                'reorder-enabled': !this.disabled,\r\n                'reorder-list-active': this.state !== 0 /* Idle */,\r\n            } }));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"disabled\": [\"disabledChanged\"]\r\n    }; }\r\n    static get style() { return \".reorder-list-active>*{-webkit-transition:-webkit-transform .3s;transition:-webkit-transform .3s;transition:transform .3s;transition:transform .3s,-webkit-transform .3s;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none!important;transition:none!important;-webkit-box-shadow:0 0 10px rgba(0,0,0,.4);box-shadow:0 0 10px rgba(0,0,0,.4);opacity:.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translateZ(0);transform:translateZ(0)}\"; }\r\n};\r\nconst indexForItem = (element) => {\r\n    return element['$ionIndex'];\r\n};\r\nconst findReorderItem = (node, container) => {\r\n    let parent;\r\n    while (node) {\r\n        parent = node.parentElement;\r\n        if (parent === container) {\r\n            return node;\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n};\r\nconst AUTO_SCROLL_MARGIN = 60;\r\nconst SCROLL_JUMP = 10;\r\nconst ITEM_REORDER_SELECTED = 'reorder-selected';\r\nconst reorderArray = (array, from, to) => {\r\n    const element = array[from];\r\n    array.splice(from, 1);\r\n    array.splice(to, 0, element);\r\n    return array.slice();\r\n};\r\n\r\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };\r\n"],"sourceRoot":""}
=======
{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-reorder_2-md.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6H;AAC/F;AACyF;;AAEvH;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,QAAQ,2DAAU,QAAQ,EAAE,2DAAC,eAAe,2DAAC,cAAc,sDAAsD;AAC1I;AACA,wBAAwB,uBAAuB,aAAa,cAAc,YAAY,cAAc,cAAc,eAAe,eAAe,WAAW,EAAE;AAC7J;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yJAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6DAAsB;AAClC;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ,6DAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,sCAAsC,YAAY;AAClD;AACA;AACA,sCAAsC,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2DAAU;AAC/B,gBAAgB,2DAAC,CAAC,mDAAI,GAAG;AACzB;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA,MAAM;AACN,wBAAwB,gCAAgC,yCAAyC,iCAAiC,yBAAyB,+CAA+C,sBAAsB,iBAAiB,yBAAyB,sBAAsB,qBAAqB,iBAAiB,6BAA6B,cAAc,oBAAoB,YAAY,mBAAmB,sBAAsB,kBAAkB,gDAAgD,wBAAwB,gBAAgB,kBAAkB,kBAAkB,kCAAkC,0BAA0B,2CAA2C,mCAAmC,WAAW,YAAY,2CAA2C,gCAAgC,wBAAwB,EAAE;AAC90B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqE","file":"53-es2015.js","sourcesContent":["import { r as registerInstance, h, c as getIonMode, H as Host, d as createEvent, e as getElement } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, c as hapticSelectionEnd } from './haptic-c8f1473e.js';\n\nconst Reorder = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    onClick(ev) {\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n    }\n    render() {\n        return (h(Host, { class: getIonMode(this) }, h(\"slot\", null, h(\"ion-icon\", { name: \"reorder\", lazy: false, class: \"reorder-icon\" }))));\n    }\n    static get style() { return \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px;font-size:31px;opacity:.3}\"; }\n};\n\nconst ReorderGroup = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.lastToIndex = -1;\n        this.cachedHeights = [];\n        this.scrollElTop = 0;\n        this.scrollElBottom = 0;\n        this.scrollElInitial = 0;\n        this.containerTop = 0;\n        this.containerBottom = 0;\n        this.state = 0 /* Idle */;\n        /**\n         * If `true`, the reorder will be hidden.\n         */\n        this.disabled = true;\n        this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.disabled);\n        }\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (contentEl) {\n            this.scrollEl = await contentEl.getScrollElement();\n        }\n        this.gesture = (await import('./index-624eea58.js')).createGesture({\n            el: this.el,\n            gestureName: 'reorder',\n            gesturePriority: 110,\n            threshold: 0,\n            direction: 'y',\n            passive: false,\n            canStart: detail => this.canStart(detail),\n            onStart: ev => this.onStart(ev),\n            onMove: ev => this.onMove(ev),\n            onEnd: () => this.onEnd(),\n        });\n        this.disabledChanged();\n    }\n    disconnectedCallback() {\n        this.onEnd();\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Completes the reorder operation. Must be called by the `ionItemReorder` event.\n     *\n     * If a list of items is passed, the list will be reordered and returned in the\n     * proper order.\n     *\n     * If no parameters are passed or if `true` is passed in, the reorder will complete\n     * and the item will remain in the position it was dragged to. If `false` is passed,\n     * the reorder will complete and the item will bounce back to its original position.\n     *\n     * @param listOrReorder A list of items to be sorted and returned in the new order or a\n     * boolean of whether or not the reorder should reposition the item.\n     */\n    complete(listOrReorder) {\n        return Promise.resolve(this.completeSync(listOrReorder));\n    }\n    canStart(ev) {\n        if (this.selectedItemEl || this.state !== 0 /* Idle */) {\n            return false;\n        }\n        const target = ev.event.target;\n        const reorderEl = target.closest('ion-reorder');\n        if (!reorderEl) {\n            return false;\n        }\n        const item = findReorderItem(reorderEl, this.el);\n        if (!item) {\n            return false;\n        }\n        ev.data = item;\n        return true;\n    }\n    onStart(ev) {\n        ev.event.preventDefault();\n        const item = this.selectedItemEl = ev.data;\n        const heights = this.cachedHeights;\n        heights.length = 0;\n        const el = this.el;\n        const children = el.children;\n        if (!children || children.length === 0) {\n            return;\n        }\n        let sum = 0;\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            sum += child.offsetHeight;\n            heights.push(sum);\n            child.$ionIndex = i;\n        }\n        const box = el.getBoundingClientRect();\n        this.containerTop = box.top;\n        this.containerBottom = box.bottom;\n        if (this.scrollEl) {\n            const scrollBox = this.scrollEl.getBoundingClientRect();\n            this.scrollElInitial = this.scrollEl.scrollTop;\n            this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\n            this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\n        }\n        else {\n            this.scrollElInitial = 0;\n            this.scrollElTop = 0;\n            this.scrollElBottom = 0;\n        }\n        this.lastToIndex = indexForItem(item);\n        this.selectedItemHeight = item.offsetHeight;\n        this.state = 1 /* Active */;\n        item.classList.add(ITEM_REORDER_SELECTED);\n        hapticSelectionStart();\n    }\n    onMove(ev) {\n        const selectedItem = this.selectedItemEl;\n        if (!selectedItem) {\n            return;\n        }\n        // Scroll if we reach the scroll margins\n        const scroll = this.autoscroll(ev.currentY);\n        // // Get coordinate\n        const top = this.containerTop - scroll;\n        const bottom = this.containerBottom - scroll;\n        const currentY = Math.max(top, Math.min(ev.currentY, bottom));\n        const deltaY = scroll + currentY - ev.startY;\n        const normalizedY = currentY - top;\n        const toIndex = this.itemIndexForTop(normalizedY);\n        if (toIndex !== this.lastToIndex) {\n            const fromIndex = indexForItem(selectedItem);\n            this.lastToIndex = toIndex;\n            hapticSelectionChanged();\n            this.reorderMove(fromIndex, toIndex);\n        }\n        // Update selected item position\n        selectedItem.style.transform = `translateY(${deltaY}px)`;\n    }\n    onEnd() {\n        const selectedItemEl = this.selectedItemEl;\n        this.state = 2 /* Complete */;\n        if (!selectedItemEl) {\n            this.state = 0 /* Idle */;\n            return;\n        }\n        const toIndex = this.lastToIndex;\n        const fromIndex = indexForItem(selectedItemEl);\n        if (toIndex === fromIndex) {\n            this.completeSync();\n        }\n        else {\n            this.ionItemReorder.emit({\n                from: fromIndex,\n                to: toIndex,\n                complete: this.completeSync.bind(this)\n            });\n        }\n        hapticSelectionEnd();\n    }\n    completeSync(listOrReorder) {\n        const selectedItemEl = this.selectedItemEl;\n        if (selectedItemEl && this.state === 2 /* Complete */) {\n            const children = this.el.children;\n            const len = children.length;\n            const toIndex = this.lastToIndex;\n            const fromIndex = indexForItem(selectedItemEl);\n            if (toIndex !== fromIndex && (!listOrReorder || listOrReorder === true)) {\n                const ref = (fromIndex < toIndex)\n                    ? children[toIndex + 1]\n                    : children[toIndex];\n                this.el.insertBefore(selectedItemEl, ref);\n            }\n            if (Array.isArray(listOrReorder)) {\n                listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\n            }\n            for (let i = 0; i < len; i++) {\n                children[i].style['transform'] = '';\n            }\n            selectedItemEl.style.transition = '';\n            selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\n            this.selectedItemEl = undefined;\n            this.state = 0 /* Idle */;\n        }\n        return listOrReorder;\n    }\n    itemIndexForTop(deltaY) {\n        const heights = this.cachedHeights;\n        let i = 0;\n        // TODO: since heights is a sorted array of integers, we can do\n        // speed up the search using binary search. Remember that linear-search is still\n        // faster than binary-search for small arrays (<64) due CPU branch misprediction.\n        for (i = 0; i < heights.length; i++) {\n            if (heights[i] > deltaY) {\n                break;\n            }\n        }\n        return i;\n    }\n    /********* DOM WRITE ********* */\n    reorderMove(fromIndex, toIndex) {\n        const itemHeight = this.selectedItemHeight;\n        const children = this.el.children;\n        for (let i = 0; i < children.length; i++) {\n            const style = children[i].style;\n            let value = '';\n            if (i > fromIndex && i <= toIndex) {\n                value = `translateY(${-itemHeight}px)`;\n            }\n            else if (i < fromIndex && i >= toIndex) {\n                value = `translateY(${itemHeight}px)`;\n            }\n            style['transform'] = value;\n        }\n    }\n    autoscroll(posY) {\n        if (!this.scrollEl) {\n            return 0;\n        }\n        let amount = 0;\n        if (posY < this.scrollElTop) {\n            amount = -SCROLL_JUMP;\n        }\n        else if (posY > this.scrollElBottom) {\n            amount = SCROLL_JUMP;\n        }\n        if (amount !== 0) {\n            this.scrollEl.scrollBy(0, amount);\n        }\n        return this.scrollEl.scrollTop - this.scrollElInitial;\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: {\n                [mode]: true,\n                'reorder-enabled': !this.disabled,\n                'reorder-list-active': this.state !== 0 /* Idle */,\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \".reorder-list-active>*{-webkit-transition:-webkit-transform .3s;transition:-webkit-transform .3s;transition:transform .3s;transition:transform .3s,-webkit-transform .3s;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none!important;transition:none!important;-webkit-box-shadow:0 0 10px rgba(0,0,0,.4);box-shadow:0 0 10px rgba(0,0,0,.4);opacity:.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translateZ(0);transform:translateZ(0)}\"; }\n};\nconst indexForItem = (element) => {\n    return element['$ionIndex'];\n};\nconst findReorderItem = (node, container) => {\n    let parent;\n    while (node) {\n        parent = node.parentElement;\n        if (parent === container) {\n            return node;\n        }\n        node = parent;\n    }\n    return undefined;\n};\nconst AUTO_SCROLL_MARGIN = 60;\nconst SCROLL_JUMP = 10;\nconst ITEM_REORDER_SELECTED = 'reorder-selected';\nconst reorderArray = (array, from, to) => {\n    const element = array[from];\n    array.splice(from, 1);\n    array.splice(to, 0, element);\n    return array.slice();\n};\n\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };\n"],"sourceRoot":""}
>>>>>>> Stashed changes
